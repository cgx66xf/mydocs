import threading
import time 

start= time.perf_counter()

def do_something():
	print("sleeping 1 second....")
	time.sleep(1)
	print("Done sleeping")

""" instead of calling out the function 2 times, lets put them on a thread 
do_something()
do_something()
"""

t1= threading.Thread(target= do_something)
t2= threading.Thread(target= do_something)

t1.start()
t2.start()

t1.join() #this method will make sure that they finish before moving on and printing out the timer 
t2.join() 

finish= time.perf_counter()
print("finished in", finish - start, "seconds")
------------Putting the threads in a loop------------------------------
import threading 
import time

start= time.perf_counter()

def do_something()
	print("sleeping 1 sec....")
	time.sleep(1)
	print("Done sleeping")

threads= []
for _ in range(5):
	t= threading.Thread(target= do_something)
	t.start()
	#we cant t.join() inside the loop because it would join before creating and starting the next thread 
	threads.append(t)

for thread in threads:
	thread.join()
	
---------------Passing arguments to a threaded function-------------------
import threading
import time

start= time.perf_counter()

def do_something(time)
	print("Sleeping for {} seconds...".format(time))
	time.sleep(time)
	print("Done sleeping")
	
threads= []

for _ in range(10):
	t= threading.Thread(target= do_something, args= [1.5]) #passes the time argument as 1.5 seconds
	t.start()
	threads.append(t)

for thread in threads:
	thread.join()
---------------------------Thread pool executer-------------------------------

	
	
	
	
	
	
	
	
	
	
	
